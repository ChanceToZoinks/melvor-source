declare class PlayerStats extends CharacterStats {
    summoningMaxHit: number;
}
declare class Player extends Character {
    equipmentSets: EquipmentSet[];
    selectedEquipmentSet: number;
    food: EquippedFood;
    attackStyles: {};
    equipToSet: number;
    modifiers: PlayerModifiers;
    noun: {
        plain: string;
        possesive: string;
        pronoun: string;
        is: string;
    };
    runesProvided: Map<any, any>;
    prayerPoints: number;
    target: Player;
    stats: PlayerStats;
    eatTimeout: number;
    allowToEatFromTimeout: boolean;
    quickEquipMenu: CombatQuickEquipMenu;
    rendersRequired: {
        stats: boolean;
        hitChance: boolean;
        hitpoints: boolean;
        damageSplash: boolean;
        effects: boolean;
        attackBar: boolean;
        attackBarMinibar: boolean;
        summonBar: boolean;
        prayerPoints: boolean;
        prayerSelection: boolean;
        spellSelection: boolean;
        ancientSelection: boolean;
        archaicSelection: boolean;
        auroraSelection: boolean;
        curseSelection: boolean;
        attackStyle: boolean;
        equipment: boolean;
        food: boolean;
        combatLevel: boolean;
        attacks: boolean;
        passives: boolean;
        equipmentSets: boolean;
        runesUsed: boolean;
        autoEat: boolean;
        combatTriangle: boolean;
        damageValues: boolean;
        levels: boolean;
        activeSkillModifierChange: boolean;
    };
    activeSummonSlots: any[];
    statProviders: Set<any>;
    activeItemSynergies: Set<any>;
    summonAttackInterval: number;
    itemEffects: Set<any>;
    _pets: number;
    baseSpawnInterval: number;
    conditionalListeners: {
        All: Set<any>;
        PlayerHitpoints: Set<any>;
        EnemyHitpoints: Set<any>;
        ItemCharges: Set<any>;
        BankItem: Set<any>;
        PlayerDOT: Set<any>;
        EnemyDOT: Set<any>;
        PlayerModEffect: Set<any>;
        EnemyModEffect: Set<any>;
        EnemySpawn: Set<any>;
        Stun: Set<any>;
        EnemyStun: Set<any>;
        Sleep: Set<any>;
        EnemySleep: Set<any>;
    };
    timers: {
        act: Timer;
        regen: Timer;
        summon: Timer;
    };
    get activePrayers(): Set<any>;
    get activeTriangle(): any;
    get statElements(): any;
    get splashManager(): any;
    get effectRenderer(): any;
    get attackBar(): any;
    get attackBarMinibar(): any;
    get equipment(): Equipment;
    get equipToSetEquipment(): Equipment;
    get spellSelection(): SpellSelection;
    get attackStyle(): any;
    get autoEatThreshold(): number;
    get autoEatHPLimit(): number;
    get autoEatEfficiency(): number;
    get synergyDescription(): any;
    get numEquipSets(): number;
    get maxPrayerCost(): number;
    set pets(arg: number);
    get pets(): number;
    get bigOlRonModifiers(): {
        increasedMeleeStrengthBonus: number;
        increasedMinHitBasedOnMaxHit: number;
        increasedDamageReduction: number;
    };
    get useCombinationRunes(): any;
    get allowRegen(): boolean;
    get addItemsToBankOnLoadFail(): boolean;
    setDefaultAttackStyles(): void;
    setCallbacks(): void;
    initialize(): void;
    registerStatProvider(provider: any): void;
    getMonsterSpawnTime(): number;
    isEquipmentSlotUnlocked(slot: any): boolean;
    checkEquipmentSetsForItem(item: any): boolean;
    checkEquipmentRequirements(): void;
    computeItemEffectList(): void;
    applyItemEffects(): void;
    checkItemEffects(): void;
    resetPrimarySpell(): void;
    checkMagicUsage(): void;
    computeLevels(): void;
    getAccuracyValues(): {
        effectiveLevel: number;
        bonus: number;
    };
    computeAttackSelection(): void;
    getSlotAttacks(slot: any): any;
    computeRuneProvision(): void;
    damage(amount: any, source: any, thieving?: boolean): void;
    addPrayerPointsBasedOnDamage(amount: any): void;
    autoEat(foodSwapped?: boolean): void;
    getRuneCosts(spell: any): any[];
    onMagicAttackFailure(): void;
    onRangedAttackFailure(quiver: any): void;
    rewardForDamage(damage: any): void;
    rewardForSummonDamage(damage: any): void;
    summonAttack(): void;
    startSummonAttack(tickOffset?: boolean): void;
    postAttack(attack: any, attackType: any): void;
    onHit(): void;
    applyOnBeingHitEffects(): void;
    onMiss(): void;
    trackWeaponStat(stat: any, amount?: number): void;
    trackArmourStat(stat: any, amount?: number): void;
    addItemStat(item: any, stat: any, amount: any): void;
    consumeRunes(costs: any): void;
    consumeEquipmentCharges(event: any, interval: any): void;
    removeFromQuiver(qty?: number): void;
    removeFromConsumable(qty?: number): void;
    consumeAmmo(): void;
    trackItemUsage(costs: any): void;
    getFlatReflectDamage(): any;
    applyTriangleToDamage(target: any, damage: any): any;
    quickEquipItem(item: any, skill: any): void;
    equipCallback(item: any, slot: any, quantity?: number): void;
    quickEquipSynergy(synergy: any): void;
    changeEquipmentSet(setID: any): void;
    changeEquipToSet(setID: any): void;
    updateEquipmentSets(): void;
    updateForEquipmentChange(): void;
    updateForEquipSetChange(): void;
    equipItem(item: any, set: any, slot?: string, quantity?: number): boolean;
    unequipCallback(slot: any): () => any;
    unequipItem(set: any, slot: any): any;
    autoEquipFood(item: any, quantity: any): boolean;
    equipFood(item: any, quantity: any): boolean;
    unequipFood(): void;
    selectFood(slotID: any): void;
    eatFood(quantity?: number, interrupt?: boolean, efficiency?: number): void;
    getFoodHealing(item: any): any;
    getFoodHealingBonus(item: any): number;
    startHoldToEat(): void;
    stopHoldToEat(): void;
    interruptAttack(): void;
    togglePrayer(prayer: any, render?: boolean): void;
    toggleSpell(spell: any, render?: boolean): void;
    toggleCurse(spell: any, render?: boolean): void;
    toggleAurora(spell: any, render?: boolean): void;
    toggleAncient(spell: any, render?: boolean): void;
    toggleArchaic(spell: any, render?: boolean): void;
    consumePrayerPoints(amount: any): void;
    disableActivePrayers(): void;
    addPrayerPoints(amount: any): void;
    trackPrayerStats(stat: any, amount: any): void;
    applyCostModifiersToPrayerCost(amount: any): any;
    applyPreservationToPrayerCost(amount: any): any;
    applyModifiersToPrayerCost(amount: any): any;
    computePrayerMaxCost(prayer: any): any;
    renderPrayerPoints(): void;
    renderPrayerSelection(): void;
    checkIfCantEquip(): boolean;
    computeEquipmentStats(): void;
    checkActiveSummon(slot: any): void;
    computeSummonMaxHit(): void;
    computeAttackType(): void;
    setAttackStyle(attackType: any, style: any): void;
    computeModifiers(): void;
    addProviderModifiers(): void;
    addAttackStyleModifiers(): void;
    addEquippedItemModifiers(): void;
    computeTargetModifiers(): void;
    computeItemSynergies(): void;
    computeSummoningSynergy(): void;
    activeSummoningSynergy: any;
    checkStatCompareCondition(condition: any): boolean;
    checkCondition(condition: any): any;
    updateConditionals(hook: any, computeStats: any, computeTargetStats: any): void;
    registerConditionalListeners(conditionals: any): void;
    computeConditionalListeners(): void;
    addConditionalModifiers(): void;
    addConditionalTargetModifiers(): void;
    addPrayerModifiers(): void;
    addMiscModifiers(): void;
    addGamemodeModifiers(): void;
    addSummonSynergyModifiers(): void;
    get equippedSummoningSynergy(): any;
    removeSummonCharge(slot: any, interval: any): void;
    calculateAreaEffectValue(value: any): number;
    addMiscSummoningModifiers(): void;
    processDeath(): void;
    applyDeathPenalty(): void;
    regen(): void;
    renderAttackStyle(): void;
    setAttackStyleButtonCallbacks(): void;
    renderSummonMaxHit(): void;
    renderFood(): void;
    renderAutoEat(): void;
    renderCombatTriangle(): void;
    getExperienceGainSkills(): any[];
    renderActiveSkillModifiers(): void;
    renderEquipmentSets(): void;
    renderAttackIcon(): void;
    renderSummonBar(): void;
    rewardSlayerCoins(): void;
    rewardXPAndPetsForDamage(damage: any): void;
    rollForSummoningMarks(skill: any, interval: any): void;
    rewardCurrencyForSummonDamage(damage: any): void;
    rewardCurrencyForDamage(damage: any): void;
    rewardGPForKill(): void;
    processCombatEvent(event: any, interval?: number): void;
    renderCombatLevel(): void;
    convertFromOldSaveFormat(saveGame: any, idMap: any): void;
}
